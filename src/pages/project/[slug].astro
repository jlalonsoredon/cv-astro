---
import Layout from "../../layouts/post.astro";
import Button from "../../components/button.astro";
import "../../styles/wp-content.css";
import { SITE } from "../../config/site";

// Función que genera todas las rutas estáticas
export async function getStaticPaths() {
  // Validar que las variables de entorno estén disponibles
  if (!SITE.apiBase || SITE.apiBase.includes('localhost')) {
    console.warn('API Base not configured for production, returning empty paths');
    return [];
  }

  let portfolioData: any[] = [];
  let posts: any[] = [];

  try {
    // Obtener datos del portfolio con timeout y mejor manejo de errores
    const portfolioResponse = await fetch(`${SITE.apiBase}/wp/v2/portfolio?_embed&per_page=100`, {
      headers: { 
        Accept: "application/json",
        'User-Agent': 'Astro-Build/1.0'
      },
      signal: AbortSignal.timeout(10000) // 10 segundos timeout
    });

    if (portfolioResponse.ok) {
      const portfolioText = await portfolioResponse.text();
      try {
        const data = JSON.parse(portfolioText);
        portfolioData = Array.isArray(data) ? data : [];
      } catch (parseError) {
        console.warn('Failed to parse portfolio data:', parseError);
        portfolioData = [];
      }
    }
  } catch (portfolioError) {
    console.warn('Portfolio fetch failed:', portfolioError);
    portfolioData = [];
  }

  try {
    // Obtener páginas/posts con timeout
    const response = await fetch(`${SITE.apiBase}/wp/v2/pages?categories=portfolio&_embed&per_page=100`, {
      headers: { 
        Accept: "application/json",
        'User-Agent': 'Astro-Build/1.0'
      },
      signal: AbortSignal.timeout(10000) // 10 segundos timeout
    });

    if (response.ok) {
      const postsText = await response.text();
      try {
        posts = JSON.parse(postsText);
        if (!Array.isArray(posts)) {
          posts = [];
        }
      } catch (parseError) {
        console.warn('Failed to parse posts data:', parseError);
        posts = [];
      }
    }
  } catch (postsError) {
    console.warn('Posts fetch failed:', postsError);
    posts = [];
  }

  // Si no hay posts, retornar array vacío en lugar de fallar
  if (!posts.length) {
    console.warn('No posts found, returning empty paths');
    return [];
  }

  // Crear mapa de custom_link -> slug de página para navegación
  const linkToSlugMap = new Map();
  posts.forEach((page: any) => {
    if (page.link) {
      linkToSlugMap.set(page.link, page.slug);
    }
  });

  // Mapear cada post a una ruta con navegación
  return posts.map((post: any, index: number) => {
    // Validar que el post tenga los campos requeridos
    if (!post.slug || !post.title?.rendered) {
      console.warn('Post missing required fields:', post);
      return null;
    }

    const currentAstroUrl = `/project/${post.slug}`;
    
    // Encontrar la posición en el portfolio de forma segura
    const portfolioIndex = portfolioData.findIndex((portfolio: any) => {
      try {
        const portfolioPath = portfolio.custom_link?.replace(/^https?:\/\/[^\/]+/, '') || '';
        return portfolioPath === currentAstroUrl;
      } catch (e) {
        return false;
      }
    });
    
    const actualIndex = portfolioIndex >= 0 ? portfolioIndex : index;
    
    // Obtener proyectos anterior y siguiente de forma segura
    const prevPortfolioItem = actualIndex > 0 ? portfolioData[actualIndex - 1] : null;
    const nextPortfolioItem = actualIndex < portfolioData.length - 1 ? portfolioData[actualIndex + 1] : null;
    
    return {
      params: { slug: post.slug },
      props: { 
        post,
        prevProject: prevPortfolioItem,
        nextProject: nextPortfolioItem,
        currentIndex: actualIndex + 1,
        totalProjects: portfolioData.length,
        linkToSlugMap: Object.fromEntries(linkToSlugMap)
      },
    };
  }).filter(Boolean); // Filtrar nulls
}

const { post, prevProject, nextProject, currentIndex, totalProjects, linkToSlugMap } = Astro.props;

function processContent(content: string) {
  if (!content) return '';
  
  return content.replace(
    /<Button\s+text="([^"]*?)"\s+link="([^"]*?)"\s+target="([^"]*?)"\s*\/?>.*?<\/Button>?/gi,
    '<a href="$2" target="$3" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">$1</a>'
  );
}

const processedContent = processContent(post?.content?.rendered || '');
---

<Layout frontmatter={{ title: post?.title?.rendered || 'Proyecto' }}>
  <div class="mb-8">
    {post?._embedded?.['wp:featuredmedia']?.[0]?.source_url && (
      <img 
        src={post._embedded['wp:featuredmedia'][0].source_url} 
        alt={post.title.rendered}
        class="w-full h-64 object-cover rounded-lg mb-6"
      />
    )}
  </div>
  
  <article class="wp-content">
    <div set:html={post?.content?.rendered || ''}></div>
  </article>
  
  {post?.external_link && (
    <div class="mt-6">
      <Button text="Visite esta web" link={post.external_link} target="_blank" />
    </div>
  )}

  <!-- Navegación entre proyectos -->
  <nav class="mt-12 pt-8 border-t border-neutral-200 dark:border-neutral-700">
    <div class="flex items-center justify-between">
      <!-- Proyecto anterior -->
      <div class="flex-1">
        {prevProject ? (
          <a 
            href={prevProject.custom_link}
            class="group flex items-center text-sm text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white transition-colors"
          >
            <svg class="w-4 h-4 mr-2 transition-transform group-hover:-translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            <div>
              <div class="text-xs uppercase tracking-wide mb-1">Anterior</div>
              <div class="font-medium">{prevProject.title?.rendered}</div>
            </div>
          </a>
        ) : (
          <div></div>
        )}
      </div>

      <!-- Botón volver al listado -->
      <div class="flex-shrink-0 mx-6">
        <div class="text-center">
          <div class="text-xs text-neutral-500 dark:text-neutral-400 mb-2">
            {currentIndex} de {totalProjects}
          </div>
          <Button text="Ver todos los proyectos" link="/projects" />
        </div>
      </div>

      <!-- Proyecto siguiente -->
      <div class="flex-1 text-right">
        {nextProject ? (
          <a 
            href={nextProject.custom_link}
            class="group flex items-center justify-end text-sm text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white transition-colors"
          >
            <div class="text-right">
              <div class="text-xs uppercase tracking-wide mb-1">Siguiente</div>
              <div class="font-medium">{nextProject.title?.rendered}</div>
            </div>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        ) : (
          <div></div>
        )}
      </div>
    </div>
  </nav>
</Layout>
